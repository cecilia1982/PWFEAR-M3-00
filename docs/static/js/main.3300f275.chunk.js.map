{"version":3,"sources":["components/Logo.js","components/Link.js","components/Menu.js","components/Mapa/index.js","components/Video/index.js","components/Gondola/index.js","App.js","serviceWorker.js","index.js"],"names":["Logo","src","this","props","category","className","alt","React","Component","Link","href","url","target","blank","rel","text","Menu","menu","items","map","e","i","key","Mapa","title","id","zoom","long","lat","Video","play","allow","allowFullScreen","style","width","height","border","Producto","state","isLoaded","setState","datos","onClick","onUpdatePrice","bind","nombre","precio","newPrice","prompt","Gondola","productos","links","App","fetch","then","rta","json","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3300f275.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Logo extends React.Component {\r\n\r\n  render(){\r\n    return <img src={`https://lorempixel.com/320/320/${this.props.category}`} className=\"App-logo\" alt=\"logo\" />\r\n  }\r\n\r\n}\r\nexport default Logo\r\n","import React from 'react'\r\nimport './Link.css'\r\n\r\nclass Link extends React.Component {\r\n\r\n  render(){\r\n    return <a className=\"App-link\" href={this.props.url} target={this.props.blank ? \"_blank\" : \"_self\"} rel=\"noopener noreferrer\">{this.props.text}</a>\r\n  }\r\n\r\n}\r\nexport default Link\r\n","import React from 'react'\r\nimport Link from './Link'\r\n\r\nclass Menu extends React.Component {\r\n\r\n  render(){\r\n    \r\n    const menu = this.props.items.map( (e, i) => <Link url={e.url} blank={e.blank} text={e.text} key={i} />)\r\n\r\n    return <nav>{menu}</nav>\r\n  }\r\n\r\n}\r\nexport default Menu\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nclass Mapa extends React.Component {\r\n\r\n  render(){\r\n    return <iframe title=\"mapita\" id=\"mapa\" src={`https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d${this.props.zoom * 1000}!2d${this.props.long}!3d${this.props.lat}!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1ses!2sar!4v1574809884625!5m2!1ses!2sar`}></iframe>\r\n  }\r\n\r\n}\r\nexport default Mapa\r\n","import React from 'react'\r\n\r\nclass Video extends React.Component {\r\n\r\n  render(){\r\n    return <iframe title=\"videito\" src={`https://www.youtube.com/embed/${this.props.id}?autoplay=${this.props.play === \"yes\" ? 1 : 0 }`} allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen style={{ width : 480, height : 320, border : 0 }}></iframe>\r\n  }\r\n\r\n}\r\nexport default Video\r\n","import React from \"react\";\r\n\r\nclass Producto extends React.Component {\r\n  //1) Antes de \"nacer\" el componente\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoaded: false\r\n    };\r\n  }\r\n\r\n  //2) Al \"montar\" el componente en el Virtual DOM\r\n  componentDidMount() {\r\n    //<-- Ideal para operaciones asincrónicas (AJAX)\r\n    this.setState({ ...this.props.datos, isLoaded: true });\r\n  }\r\n  //3) Mostrar el componente en el Real DOM\r\n  render() {\r\n    //<-- Se re-ejecuta cada vez que se ejecuta primero el setState()\r\n    if (!this.state.isLoaded) {\r\n      return <em>Cargando...</em>;\r\n    } else {\r\n      return (\r\n        <cite style={{}} onClick={this.onUpdatePrice.bind(this)}>\r\n          Soy un producto llamado {this.state.nombre} y valgo ARS\r\n          {this.state.precio}...\r\n        </cite>\r\n      );\r\n    }\r\n  }\r\n\r\n  //////////////////////////////////////////////\r\n\r\n  onUpdatePrice() {\r\n    //alert( `Si, en serio soy el componente Producto llamado \"${this.state.nombre}\"`);\r\n    let newPrice = prompt(\"Ingrese nuevo precio\");\r\n\r\n    this.setState({ precio: newPrice });\r\n  }\r\n}\r\n\r\nclass Gondola extends React.Component {\r\n  //1) Antes de \"nacer\" el componente\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  //2) Al \"montar\" el componente en el Virtual DOM\r\n  componentDidMount() {\r\n    //<-- Ideal para operaciones sincrónicas (Iteraciones)\r\n  }\r\n\r\n  //3) Mostrar el componente en el Real DOM\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.productos.map((e, i) => (\r\n          <Producto datos={e} key={i} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gondola;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Logo from \"./components/Logo\";\r\nimport Menu from \"./components/Menu\";\r\nimport Mapa from \"./components/Mapa\";\r\nimport Video from \"./components/Video\";\r\nimport Gondola from \"./components/Gondola\";\r\n\r\nconst links = [\r\n  {\r\n    url: \"https://reactjs.org\",\r\n    blank: true,\r\n    text: \"Documentation\"\r\n  },\r\n  {\r\n    url: \"https://reactjs.org/tutorial/tutorial.html\",\r\n    blank: false,\r\n    text: \"Tutorial\"\r\n  },\r\n  {\r\n    url: \"https://angular.io/docs\",\r\n    blank: true,\r\n    text: \"The Dark Side of the JS\"\r\n  }\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoaded: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    /* DESAFIO IV: */\r\n\r\n    //fetch(\"OBTENCION\").then(CONVERSION - lo quiero convertir a json).then(UTILIZACION)\r\n    fetch(\"https://api.myjson.com/bins/1giaf3\")\r\n      .then(rta => rta.json())\r\n      .then(data => {\r\n        this.setState({ productos: data, isLoaded: true });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Logo category=\"sports\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          {/* DESAFIO I: */}\r\n          <Menu items={links} />\r\n\r\n          {/* DESAFIO II: */}\r\n          <Mapa lat=\"-34.6078602\" long=\"-58.383111\" zoom=\"15\" />\r\n\r\n          {/* DESAFIO III: */}\r\n          <Video id=\"TobNCFMK_bs\" play=\"no\" />\r\n\r\n          {/* DESAFIO v: */}\r\n          {!this.state.isLoaded ? (\r\n            <p>Cargandoooooo...</p>\r\n          ) : (\r\n            <Gondola productos={this.state.productos} />\r\n          )}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}